generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  tournaments Tournament[]

  @@map("games")
}

model Tournament {
  id                Int                @id @default(autoincrement())
  tournamentName    String             @db.VarChar(100)
  startDate         DateTime           @db.Timestamp(6)
  startTime         String             @db.VarChar(5)
  format            String             @db.VarChar(50)
  rules             String
  maxParticipants   Int
  rewards           String?            @db.VarChar(255)
  minTeams          Int
  playersPerTeam    Int
  totalPlayers      Int
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  updatedAt         DateTime           @db.Timestamp(6)
  gameId            Int
  tournament_typeId Int
  matches           Match[]
  teams             Team[]
  status            TournamentStatus[]
  game              Game               @relation(fields: [gameId], references: [id])
  tournament_type   TournamentType     @relation(fields: [tournament_typeId], references: [id])

  @@map("tournaments")
}

model TournamentType {
  id          Int          @id @default(autoincrement())
  type        String       @unique @db.VarChar(50)
  tournaments Tournament[]

  @@map("tournament_types")
}

model TournamentStatus {
  id           Int        @id @default(autoincrement())
  tournamentId Int
  status       String     @db.VarChar(20)
  updatedAt    DateTime   @db.Timestamp(6)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@map("tournament_status")
}

model Team {
  id             Int          @id @default(autoincrement())
  teamName       String       @db.VarChar(100)
  tournamentId   Int
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  matchesAsTeam1 Match[]      @relation("Team1")
  matchesAsTeam2 Match[]      @relation("Team2")
  members        TeamMember[]
  tournament     Tournament   @relation(fields: [tournamentId], references: [id])

  @@map("teams")
}

model User {
  id         Int          @id @default(autoincrement())
  pseudo     String       @unique @db.VarChar(50)
  name       String       @db.VarChar(50)
  last_name  String       @db.VarChar(50)
  email      String       @unique @db.VarChar(100)
  password   String       @db.VarChar(255)
  sexe       String       @db.Char(1)
  birthday   DateTime     @db.Date
  created_at DateTime     @default(now()) @db.Timestamp(6)
  last_auth  DateTime     @db.Timestamp(6)
  role       String       @default("user") @db.VarChar(20)
  teams      TeamMember[]

  @@map("users")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  role      String   @db.VarChar(20)
  joined_at DateTime @default(now()) @db.Timestamp(6)
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model Match {
  id           Int        @id @default(autoincrement())
  tournamentId Int
  team1Id      Int
  team2Id      Int
  team1Score   Int?
  team2Score   Int?
  winnerId     Int?
  matchDate    DateTime   @db.Timestamp(6)
  status       String     @db.VarChar(20)
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  team1        Team       @relation("Team1", fields: [team1Id], references: [id])
  team2        Team       @relation("Team2", fields: [team2Id], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@map("matches")
}

model Contact {
  id         String   @id
  name       String
  email      String
  subject    String
  message    String
  created_at DateTime @default(now())
  status     String   @default("unread")

  @@map("Contact")
}
